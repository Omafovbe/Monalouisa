// prisma/schema.prisma
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    STUDENT
    TEACHER
    ADMIN
}

enum ApplicationStatus {
    PENDING
    APPROVED
    REJECTED
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          UserRole        @default(STUDENT)
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    // Role-specific profiles
    teacher Teacher?
    student Student?
    admin   Admin?
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model Teacher {
    id                 Int                  @id @default(autoincrement())
    userId             String               @unique
    user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    bio                String?
    phone              String?
    profilePicture     String?
    hireDate           DateTime?
    status             ApplicationStatus    @default(PENDING)
    subjects           SubjectsOnTeachers[]
    students           StudentsOnTeachers[]
    teacherApplication TeacherApplication?
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    Schedule           Schedule[]
    Feedback           Feedback[]

    @@index([status])
}

model Student {
    id          String               @id @default(cuid())
    userId      String               @unique
    user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    dateOfBirth DateTime?
    grade       String?
    parentName  String?
    parentEmail String?
    parentPhone String?
    schedules   Schedule[]
    teachers    StudentsOnTeachers[]
    createdAt   DateTime             @default(now())
    updatedAt   DateTime             @updatedAt

    StudentsOnSubjects StudentsOnSubjects[]
    subscription       Subscription?
    Feedback           Feedback[]
}

model Admin {
    id        Int      @id @default(autoincrement())
    userId    String   @unique
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Subject {
    id          Int                  @id @default(autoincrement())
    name        String               @unique
    description String?
    teachers    SubjectsOnTeachers[]
    students    StudentsOnSubjects[]
    createdAt   DateTime             @default(now())
    updatedAt   DateTime             @updatedAt

    Schedule Schedule[]
}

model TeacherApplication {
    id                Int               @id @default(autoincrement())
    teacherId         Int               @unique
    teacher           Teacher           @relation(fields: [teacherId], references: [id], onUpdate: Cascade)
    status            ApplicationStatus @default(PENDING)
    name              String
    email             String
    phone             String
    qualifications    String            @db.Text
    yearsOfExperience Int
    preferredAgeGroup String
    teachingStyle     String            @db.Text
    teachableSubjects String            @default("Arabic") @db.Text
    videoUrl          String
    reviewedBy        String? // Admin who reviewed the application
    reviewNotes       String?           @db.Text
    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt

    @@index([status])
}

model Schedule {
    id        Int      @id @default(autoincrement())
    studentId String
    subjectId Int
    startTime DateTime
    endTime   DateTime
    title     String   @default("Class Session")
    student   Student  @relation(fields: [studentId], references: [id])
    subject   Subject  @relation(fields: [subjectId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    teacherId String
    teacher   Teacher  @relation(fields: [teacherId], references: [userId])

    @@index([teacherId])
    @@index([studentId])
    @@index([subjectId])
}

// Many-to-Many Relations
model SubjectsOnTeachers {
    teacherId  Int
    subjectId  Int
    teacher    Teacher  @relation(fields: [teacherId], references: [id])
    subject    Subject  @relation(fields: [subjectId], references: [id])
    assignedAt DateTime @default(now())

    @@id([teacherId, subjectId])
}

model StudentsOnTeachers {
    studentId  String
    teacherId  Int
    student    Student  @relation(fields: [studentId], references: [id])
    teacher    Teacher  @relation(fields: [teacherId], references: [id])
    assignedAt DateTime @default(now())

    @@id([studentId, teacherId])
}

model StudentsOnSubjects {
    studentId  String
    subjectId  Int
    student    Student  @relation(fields: [studentId], references: [id])
    subject    Subject  @relation(fields: [subjectId], references: [id])
    enrolledAt DateTime @default(now())

    @@id([studentId, subjectId])
}

model Subscription {
    id                       String   @id @default(cuid())
    studentId                String   @unique
    packageName              String
    billingType              String
    status                   String
    stripeCustomerId         String?
    stripeSubscriptionId     String?
    paystackCustomerId       Int?
    paystackCustomerCode     String?
    paystackSubscriptionCode String?
    paystackEmailToken       String?
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt
    student                  Student  @relation(fields: [studentId], references: [id])

    @@index([stripeSubscriptionId])
    @@index([paystackSubscriptionCode])
}

model Feedback {
    id        String   @id @default(cuid())
    studentId String
    teacherId String
    rating    Int // 1-5 rating
    comment   String   @db.Text
    status    String   @default("PENDING") // PENDING, APPROVED, REJECTED
    student   Student  @relation(fields: [studentId], references: [id])
    teacher   Teacher  @relation(fields: [teacherId], references: [userId])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([studentId])
    @@index([teacherId])
    @@index([status])
}
